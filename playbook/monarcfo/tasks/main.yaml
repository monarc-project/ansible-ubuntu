---

- name: checkout repository
  git:
    repo: https://github.com/monarc-project/MonarcAppFO
    dest: /var/lib/monarc/fo
    version: master
    update: no
  register: appfo_pull

- name: create module dir
  file:
    path: /var/lib/monarc/fo/module/Monarc
    state: directory

- name: create data dir
  file:
    path: /var/lib/monarc/fo/data
    state: directory
    owner: "www-data"
  become: True

- name: set github auth token for composer
  command: composer config -g github-oauth.github.com {{ github_auth_token }}

- name: composer install
  shell: composer ins -o --no-dev
  args:
    chdir: /var/lib/monarc/fo
  when: appfo_pull.before == None

- name: MonarcCore link
  file:
    src: /var/lib/monarc/fo/vendor/monarc/core
    dest: /var/lib/monarc/fo/module/Monarc/Core
    state: link

- name: frontoffice link
  file:
    src: /var/lib/monarc/fo/vendor/monarc/frontoffice
    dest: /var/lib/monarc/fo/module/Monarc/FrontOffice
    state: link

- name: update-all
  shell: "scripts/update-all.sh -b"
  args:
    chdir: /var/lib/monarc/fo
  when: appfo_pull.before == None

- name: apache mod rewrite
  apache2_module:
    name: rewrite
  become: True
  notify:
    - restart apache

- name: apache log dirs
  file:
    name: "/var/log/apache2/{{ env_prefix}}{{ item.value.name}}"
    state: directory
    owner: root
    group: adm
  with_dict: "{{ clients }}"
  when: clients is defined
  become: True

- name: disable all apache virtual hosts
  command: find /etc/apache2/sites-enabled/ -type l -exec rm -f "{}" \;
  become: True

- name: client apache configuration
  template:
    src: client_apache.conf.j2
    dest: "/etc/apache2/sites-available/{{ item.value.name }}.conf"
    owner: root
  with_dict: "{{ clients }}"
  when: clients is defined
  become: True

# - name: deactivates the default virtualhost
#   command: a2dissite 000-default.conf
#   become: True
#   notify:
#     - reload apache

- name: enable apache conf
  command: "/usr/sbin/a2ensite {{item.value.name}}.conf"
  with_dict: "{{ clients }}"
  when: clients is defined
  become: True

- name: logrotate conf
  template:
    src: logrotate_apache.j2
    dest: /etc/logrotate.d/apache2
  with_dict: "{{ clients }}"
  when: clients is defined
  become: True

- name: create client dir
  file:
    name: "/var/www/{{item.value.name}}"
    state: directory
  with_dict: "{{ clients }}"
  when: clients is defined
  become: True

- name: client config file
  template:
    src: client_config.php.j2
    dest: "/var/www/{{item.value.name}}/local.php"
    owner: www-data
    mode: 0600
  with_dict: "{{ clients }}"
  when: clients is defined
  become: True
  notify:
    - restart apache

- name: create client data dir
  file:
    name: "/var/www/{{item.value.name}}/data"
    state: directory
    owner: www-data
  with_dict: "{{ clients }}"
  when: clients is defined
  become: True
  
- name: deleting client cache
  file:
    path: /var/www/{{ item.value.name }}/data/cache
    state: absent
  with_dict: "{{ clients }}"
  when: clients is defined
  become: True

- name: deleting client Doctrine proxy cache
  file:
    path: /var/www/{{ item.value.name }}/data/DoctrineORMModule/
    state: absent
  with_dict: "{{ clients }}"
  when: clients is defined
  become: True

- name: deleting client LazyServices proxy cache
  file:
    path: /var/www/{{ item.value.name }}/data/LazyServices/
    state: absent
  with_dict: "{{ clients }}"
  when: clients is defined
  become: True

- name: create client cache dir
  file:
    name: "/var/www/{{item.value.name}}/data/cache"
    state: directory
    owner: www-data
  with_dict: "{{ clients }}"
  when: clients is defined
  become: True

- name: create client Doctrine cache dir
  file:
    name: "/var/www/{{item.value.name}}/data/DoctrineORMModule/Proxy"
    state: directory
    owner: www-data
  with_dict: "{{ clients }}"
  when: clients is defined
  become: True

- name: client cache upgrade
  file:
    path: "/var/www/{{ item.value.name }}/data/upgrade"
    owner: www-data
    state: touch
  with_dict: "{{ clients }}"
  when: clients is defined
  become: True

- name: create client Proxy dir
  file:
    name: "/var/www/{{item.value.name}}/data/LazyServices/Proxy"
    state: directory
    owner: www-data
  with_dict: "{{ clients }}"
  when: clients is defined
  become: True

- name: copy default deliveries templates
  command: cp -nR /var/lib/monarc/fo/deliveries/ /var/www/{{item.value.name}}/
  with_dict: "{{ clients }}"
  when: clients is defined
  become: True

- name: set owner of deliveries
  file:
    path: /var/www/{{item.value.name}}/deliveries
    recurse: yes
    owner: www-data
    group: www-data
  with_dict: "{{ clients }}"
  when: clients is defined
  become: True

- name: set appropriate rights for deliveries
  command: chmod -R go+w /var/www/{{ item.value.name }}/deliveries
  with_dict: "{{ clients }}"
  when: clients is defined
  become: True

- name: client database creation
  mysql_db:
    name: "{{ item.value.name }}"
    config_file: /etc/mysql/debian.cnf
  with_dict: "{{ clients }}"
  when: clients is defined
  become: True

- name: client database user creation
  mysql_user:
    name: "{{ item.value.name }}"
    password: "{{ item.value.mysql_password }}"
    priv: "{{ item.value.name }}.*:ALL"
    config_file: /etc/mysql/debian.cnf
  with_dict: "{{ clients }}"
  when: clients is defined
  become: True

- name: client db migration
  shell: "scripts/client-upgrade-db.sh frontoffice localhost {{ item.value.name }} {{ item.value.mysql_password }} {{ item.value.name }}"
  args:
    chdir: /var/lib/monarc/fo
  with_dict: "{{ clients }}"
  when: clients is defined

- name: bootstrap file
  template:
    src: client_bootstrap.j2
    dest: "/tmp/bootstrap_{{ item.value.name }}.sql"
  with_dict: "{{ clients }}"
  when: clients is defined

- name: initialize client db
  shell: "if [ $( echo 'select count(id) from users;' | mysql --defaults-file=/etc/mysql/debian.cnf -N {{ item.value.name }} ) -eq 0  ] ; then mysql --defaults-file=/etc/mysql/debian.cnf {{ item.value.name }} < /tmp/bootstrap_{{ item.value.name }}.sql ;  fi"
  args:
    chdir: /var/lib/monarc/fo
  with_dict: "{{ clients }}"
  when: clients is defined
  become: True

- name: database backup script
  template:
    src: backup_db.j2
    dest: "/usr/local/bin/backup_monarc_db.sh"
    mode: 0755
    owner: root
  with_dict: "{{ clients }}"
  when: clients is defined
  become: true

- name: install gsfonts for NewCenturySchlbk-Roman
  apt:
    update_cache: True
    name: gsfonts
  become: True

- name: update ./bin/console permissions
  file:
    path: "/var/lib/monarc/fo/vendor/monarc/frontoffice/bin/console"
    owner: www-data
    group: ansible
    mode: 0775
  become: true

- name: update ./scripts/collect-stats-for-all-clients.sh permissions
  file:
    path: "/var/lib/monarc/fo/scripts/collect-stats-for-all-clients.sh"
    owner: www-data
    group: ansible
    mode: 0775
  become: true
