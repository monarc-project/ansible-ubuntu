---

- name: create monarc directory
  file:
    state: directory
    path: /var/lib/monarc/
    owner: ansible
    group: ansible
  become: True

- name: create monarc releases directory
  file:
    state: directory
    path: /var/lib/monarc/releases/

- name: download release
  get_url:
    url: "{{ monarcfo_release_url }}"
    dest: "/var/lib/monarc/releases/{{ monarcfo_release_url | basename }}"
    owner: ansible
    group: ansible
  environment:
    http_proxy: "{{ http_proxy | default('') }}"
    https_proxy: "{{ https_proxy | default('') }}"

- name: create release directory
  file:
    state: directory
    dest: "/var/lib/monarc/releases/{{ monarcfo_release_url | basename | replace('.tar.gz', '') }}"

- name: unarchive release
  unarchive:
    remote_src: yes
    src: "/var/lib/monarc/releases/{{ monarcfo_release_url | basename }}"
    dest: "/var/lib/monarc/releases/{{ monarcfo_release_url | basename | replace('.tar.gz', '') }}"

- name: create release symlink
  file:
    state: link
    src: "/var/lib/monarc/releases/{{ monarcfo_release_url | basename | replace('.tar.gz', '') }}"
    dest: "/var/lib/monarc/fo"
  register: _updated_release_symlink

- name: create data directory
  file:
    state: directory
    path: "/var/lib/monarc/fo-data"
    owner: "www-data"
  become: True

- name: create data directory symlink
  file:
    state: link
    dest: "/var/lib/monarc/fo/data"
    src: "/var/lib/monarc/fo-data"

- name: apache mod rewrite
  apache2_module:
    name: rewrite
  become: True
  notify:
    - apache2ctl configtest
    - restart apache

- name: apache log dirs
  file:
    name: "/var/log/apache2/{{ env_prefix}}{{ item.value.name}}"
    state: directory
    owner: root
    group: adm
  loop: "{{ clients | dict2items }}"
  loop_control:
    label: "{{ item.key }}"
  become: True

- name: list currently enabled vhosts
  find:
    paths:
      - /etc/apache2/sites-enabled/
    depth: 2
    patterns: "*.conf"
    file_type: link
  register: _enabled_vhosts
  tags: always

- name: deactivates extra not needed virtualhosts
  command: a2dissite "{{ item }}"
  changed_when: "'disabled.' in _a2dissite.stdout"
  register: _a2dissite
  loop: "{{ _enabled_clients_vhosts | difference( clients.keys() ) }}"
  loop_control:
    label: "disabling {{ item }}"
  vars:
    _enabled_clients_vhosts: |
      {{ _enabled_vhosts.files | map(attribute='path') | map('basename') | map('regex_replace', '\.conf$', '') | sort | list }}
  become: True
  notify:
    - apache2ctl configtest
    - reload apache

- name: client apache configuration
  template:
    src: client_apache.conf.j2
    dest: "/etc/apache2/sites-available/{{ item.value.name }}.conf"
    owner: root
  loop: "{{ clients | dict2items }}"
  loop_control:
    label: "{{ item.key }}"
  become: True

- name: enable apache conf
  command: "/usr/sbin/a2ensite {{item.value.name}}.conf"
  changed_when: "'Enabling site' in _a2ensite.stdout"
  register: _a2ensite
  loop: "{{ clients | dict2items }}"
  loop_control:
    label: "{{ item.key }}"
  become: True
  notify:
    - apache2ctl configtest
    - reload apache

- name: logrotate conf
  template:
    src: logrotate_apache.j2
    dest: /etc/logrotate.d/apache2
  loop: "{{ clients | dict2items }}"
  loop_control:
    label: "{{ item.key }}"
  become: True

- name: create client dir
  file:
    name: "/var/www/{{item.value.name}}"
    state: directory
  loop: "{{ clients | dict2items }}"
  loop_control:
    label: "{{ item.key }}"
  become: True

- name: client config file
  template:
    src: client_config.php.j2
    dest: "/var/www/{{item.value.name}}/local.php"
    owner: www-data
    mode: 0600
  register: _client_config
  loop: "{{ clients | dict2items }}"
  loop_control:
    label: "{{ item.key }}"
  become: True

- name: create client data dir
  file:
    name: "/var/www/{{item.value.name}}/data"
    state: directory
    owner: www-data
  loop: "{{ clients | dict2items }}"
  loop_control:
    label: "{{ item.key }}"
  become: True

- name: deleting client cache
  file:
    path: /var/www/{{ item.value.name }}/data/cache
    state: absent
  # local.php config is also cached
  when: ( monarcfo_clean_cache | bool ) or ( _updated_release_symlink is changed ) or ( _client_config is defined and _client_config is changed )
  loop: "{{ clients | dict2items }}"
  loop_control:
    label: "{{ item.key }}"
  become: True

- name: deleting client Doctrine proxy cache
  file:
    path: /var/www/{{ item.value.name }}/data/DoctrineORMModule/
    state: absent
  when: ( monarcfo_clean_cache | bool ) or ( _updated_release_symlink is changed )
  loop: "{{ clients | dict2items }}"
  loop_control:
    label: "{{ item.key }}"
  become: True

- name: deleting client LazyServices proxy cache
  file:
    path: /var/www/{{ item.value.name }}/data/LazyServices/
    state: absent
  when: ( monarcfo_clean_cache | bool ) or ( _updated_release_symlink is changed )
  loop: "{{ clients | dict2items }}"
  loop_control:
    label: "{{ item.key }}"
  become: True

- name: create client cache dir
  file:
    name: "/var/www/{{item.value.name}}/data/cache"
    state: directory
    owner: www-data
  loop: "{{ clients | dict2items }}"
  loop_control:
    label: "{{ item.key }}"
  become: True

- name: create client Doctrine cache dir
  file:
    name: "/var/www/{{item.value.name}}/data/DoctrineORMModule/Proxy"
    state: directory
    owner: www-data
  loop: "{{ clients | dict2items }}"
  loop_control:
    label: "{{ item.key }}"
  become: True

- name: client cache upgrade
  file:
    path: "/var/www/{{ item.value.name }}/data/upgrade"
    owner: www-data
    state: touch
  when: ( monarcfo_clean_cache | bool ) or ( _updated_release_symlink is changed )
  loop: "{{ clients | dict2items }}"
  loop_control:
    label: "{{ item.key }}"
  become: True

- name: create client Proxy dir
  file:
    name: "/var/www/{{item.value.name}}/data/LazyServices/Proxy"
    state: directory
    owner: www-data
  loop: "{{ clients | dict2items }}"
  loop_control:
    label: "{{ item.key }}"
  become: True

- name: copy default deliveries templates
  synchronize:
    src: /var/lib/monarc/fo/deliveries
    dest: "/var/www/{{ item.value.name }}"
    # keep existing file modified by client/user
    rsync_opts:
      - "--ignore-existing"
    owner: no # owner set is done right after
    archive: no # do not keep owner (default for archive opt)
    recursive: yes # disabling archive also disabled recursive flag
    times: yes # keep file mtime
  delegate_to: "{{ inventory_hostname }}"
  loop: "{{ clients | dict2items }}"
  loop_control:
    label: "{{ item.key }}"
  become: True
  register: _deliveries_synced

- name: set owner of deliveries
  file:
    path: "/var/www/{{ item.item.value.name }}/deliveries"
    recurse: yes
    owner: www-data
    group: www-data
  loop: "{{ _deliveries_synced.results }}"
  loop_control:
    label: "{{ item.item.key }}"
  when: item.changed | bool
  become: True

- name: client database creation
  mysql_db:
    name: "{{ item.value.name }}"
    config_file: /etc/mysql/debian.cnf
  loop: "{{ clients | dict2items }}"
  loop_control:
    label: "{{ item.key }}"
  become: True

- name: client database user creation
  mysql_user:
    name: "{{ item.value.name }}"
    password: "{{ item.value.mysql_password }}"
    priv: "{{ item.value.name }}.*:ALL"
    config_file: /etc/mysql/debian.cnf
  loop: "{{ clients | dict2items }}"
  loop_control:
    label: "{{ item.key }}"
  become: True

- name: client db migration
  shell: "scripts/client-upgrade-db.sh frontoffice localhost {{ item.value.name }} {{ item.value.mysql_password }} {{ item.value.name }}"
  args:
    chdir: /var/lib/monarc/fo
  loop: "{{ clients | dict2items }}"
  register: _client_upgrade
  changed_when: "{{ 'migrating' in _client_upgrade.stdout }}"
  loop_control:
    label: "{{ item.key }}"

- name: initialize client db
  command: "mysql --defaults-file=/etc/mysql/debian.cnf {{ item.value.name }}"
  args:
    stdin: "{{ item.value.sql_bootstrap }}"
    chdir: /var/lib/monarc/fo
  loop: "{{ clients | dict2items }}"
  register: _client_init
  changed_when:
    - _client_init.stdout == ""
    - _client_init.rc == 0
  failed_when:
    - _client_init.rc != 0
    - not "Duplicate entry '1' for key 'PRIMARY'" in _client_init.stderr
  loop_control:
    label: "{{ item.key }}"
  become: True
